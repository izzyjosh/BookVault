name: BookVault Code Test

run-name: Test latest push and pull request


on:
  push:
    branches:
      - dev
  
  pull_request:
    branches:
      - dev
      - 'feature/**'


jobs:
  test:
    name: test deployment
    runs-on: ubuntu-latest
    env:
      DEBUG: ${{ secrets.DEBUG }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASR_URL: ${{ secrets.DATABASE_URL }} 
      ALGORITHM: ${{ secrets.ALGORITHM }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 15s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pip install pytest pytest-cov cryptography
          echo "Test completed"


  build:
    name: Build project
    runs-on: ubuntu-latest
    needs: test
    env:
      DEBUG: ${{ secrets.DEBUG }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASR_URL: ${{ secrets.DATABASE_URL }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
          POSTGRES_HOST: localhost
        options: >-
          --health-cmd pg_isready
          --health-interval 15s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: install required dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run build
        run: |
          echo "build complete"

  auto-merge:
    name: Merge dev branch to main
    needs: [test, build]
    runs-on: ubuntu-latest
    if: ${{ github.ref}} == "refs/heads/dev"
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Merge dev into main
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin

          git checkout dev
          git pull origin dev

          git checkout main
          git pull origin main
          git merge --no-ff dev --allow-unrelated-histories
          git push

        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
